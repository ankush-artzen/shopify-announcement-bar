{% if block.settings.banner_id != blank %}

<div
  id="announcement-banner-{{ section.id }}"
  data-banner-id="{{ block.settings.banner_id }}"
>
  
  <div
  id="announcement-banner-{{ section.id }}"
  class="hide-on-load"
  data-banner-id="{{ block.settings.banner_id }}"
>
<div style="text-align: center; padding: 12px; background: #f9f9f9;">
    Loading banner...
  </div>
</div>
</div>


  <style>
  .hide-on-load {
  display: none;
}

 .hide-banner-content {
  display: none !important;
}


    /* Existing CSS (unchanged) */
    .announcement-title {
      text-align: center;
      width: 100%;
      font-size: 1.6rem;
      font-weight: 600;
      padding: 5px;
    }
    .announcement-row {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 10px;
      margin-top: 10px;
    }
    .flex-row { flex-direction: row; }
    .flex-row-reverse { flex-direction: row-reverse; }
    .announcement-button { flex-shrink: 0; }
    .countdown-link-btn {
      display: inline-block;
      padding: 8px 20px;
      font-weight: 600;
      font-size: 14px;
      border-radius: 6px;
      text-decoration: none;
      border: none;
      margin-bottom: 12px;
      cursor: pointer;
      transition: background 0.3s ease;
    }
    .countdown-link-btn:hover { opacity: 0.9; }
    .countdown-container {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-wrap: wrap;
      gap: 10px;
      padding: 15px;
    }
 .btn-top {
  padding: 6px;
  display: flex;
  justify-content: center;
}


.btn-bottom {
  padding: 2px;
  display: flex;
  justify-content: center;
}

.btn-left {
  position: absolute;
  top: 50%;
  left: 60px;
  transform: translateY(-50%);
  z-index: 9999;
}

.btn-right {
  position: absolute;
  bottom: 10%;
  right: 60px;
  transform: translateY(-50%);
  z-index: 9999;
}

/* ‚úÖ Responsive tweaks for tablets (‚â§768px) */
@media (max-width: 768px) {
  .btn-left {
    left: 30px;
    transform: translateY(-50%) scale(0.95);
  }

  .btn-right {
    right: 30px;
    bottom: 12%;
    transform: translateY(-50%) scale(0.95);
  }

  .btn-top,
  .btn-bottom {
    padding: 4px;
  }
}

@media (max-width: 480px) {
  .btn-right,
  .btn-left {
    position: relative;
    bottom: 10%;
    right: 1px;
    margin: 21px;
    transform: translateY(-50%) scale(0.9);
    z-index: 9999;
  }
}
@media (max-width: 480px) {
  .btn-left {
    position:relative;
padding-right:59px;
margin:21px;

 }
}
    .countdown-unit {
      background: rgba(255, 255, 255, 0.4);
      backdrop-filter: blur(4px);
      border-radius: 3px;
      padding: 4px 6px;
      min-width: 38px;
      text-align: center;
      font-family: system-ui, sans-serif;
      border: 1px solid #ccc;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
      color: inherit;
    }
    .countdown-unit span:first-child {
      display: block;
      font-size: 12px;
      font-weight: 700;
      margin-bottom: 2px;
    }
    .countdown-unit span:last-child {
      display: block;
      font-size: 10px;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      opacity: 0.8;
    }
    .countdown-expired {
      margin-top: 10px;
      color: #d32f2f;
      font-weight: bold;
      text-align: center;
      font-size: 14px;
    }
    .marquee-wrapper {
      overflow: hidden;
      width: 110%;
      position: relative;
    }
    .marquee-track {
      display: flex;
      white-space: nowrap;
      animation: marquee-scroll var(--marquee-speed, 20s) linear infinite;
    }
    .marquee-wrapper:hover .marquee-track {
      animation-play-state: paused;
    }
    .marquee-content {
      display: inline-block;
      padding: 11px 1.2rem;
      white-space: nowrap;
      font-size: 1.8rem;
      font-weight: 600;
      color: inherit;
      flex-shrink: 0;
      margin: 0;
      line-height: 1.2;
    }
    @keyframes marquee-scroll {
      0% { transform: translateX(0%); }
      100% { transform: translateX(-100%); }
    }
    .carousel-wrapper {
      overflow: hidden;
      width: 100%;
    }
    .carousel-track {
      display: flex;
      transition: transform 0.5s ease-in-out;
      width: 100%;
    }
    .carousel-slide {
      flex: 0 0 100%;
      text-align: center;
      font-size: 1.8rem;
      font-weight: 600;
      color: inherit;
      padding: 12px;

// üëâ Immediately hide if stored as hidden
if (localStorage.getItem(sessionKey) === "hidden") {
  container.classList.add("hide-banner-content");
  console.warn("üì¥ Banner hidden from localStorage session");
  return;
}
    }
  </style>

<script>
(async function () {
  const sectionId = "{{ section.id }}";
  const container = document.querySelector(`#announcement-banner-${sectionId}`);
  const bannerId = container?.dataset?.bannerId;
  const appUrl = "https://shopify-announcement-bar.vercel.app";
  const sessionKey = `banner_viewed_${bannerId}_this_session`;
  const inEditor = window.Shopify && Shopify.designMode;

  if (!bannerId || !container) return;

  console.log("üß™ In Shopify Editor:", inEditor);

  // Step 1: Fetch banner settings
  let settings;
  try {
    const res = await fetch(`https://shopify-announcement-bar.vercel.app/api/public/banner?id=${bannerId}`);
    const json = await res.json();

    if (!json.success || !json.data?.settings) {
      console.error("‚ùå Invalid banner settings.");
      container.innerHTML = `<div style="text-align:center; padding:12px; background:#ffeaea; color:#900;">‚ö†Ô∏è Failed to load banner</div>`;
      return;
    }

    settings = json.data.settings;
    console.log("üîß Banner settings loaded:", settings);
  } catch (err) {
    console.error("‚ùå Failed to fetch banner data:", err);
    container.innerHTML = `<div style="text-align:center; padding:12px; background:#ffeaea; color:#900;">‚ö†Ô∏è Could not load banner please check banner active or not</div>`;
    return;
  }
  console.log("üöÄ Tracking view for:", bannerId);


  // Step 2: Track view and hide if over limit
  if (!inEditor) {
    try {
      const response = await fetch(`https://shopify-announcement-bar.vercel.app/api/banner-view`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ bannerId }),
      });

      const text = await response.text();
      console.log("üì¶ Raw API response text:", text);

      let data;
      try {
        data = JSON.parse(text);
      } catch (err) {
        console.error("‚ùå Failed to parse JSON:", err);
        return;
      }

      const totalViews = data?.totalShopViews ?? 0;  
const maxViews = data?.maxViews ?? Infinity;
const plan = data?.plan ?? "Unknown";
const hideBanner = data?.hideBanner === true || totalViews >= maxViews;

console.log("üëÅÔ∏è Total Shop Views:", totalViews);
console.log("üìè Max Views Allowed:", maxViews);
console.log("üì¶ Plan Type:", plan);
console.log("üö´ Should Hide Banner:", hideBanner);


      if (hideBanner) {
        container.classList.add("hide-banner-content");
  localStorage.setItem(sessionKey, "hidden");
  return;
} else {
  localStorage.removeItem(sessionKey);
  container.style.display = "block"; 
}

      localStorage.setItem(sessionKey, "1");
    } catch (err) {
      console.error("‚ö†Ô∏è View tracking error:", err);
    }
  }

  // Step 3: Render banner
  const {
    announcementType: type,
    title = "Announcement",
    messages = [title],
    bgColor = "#f6fafd",
    textColor = "#000",
    marqueeSpeed = 20,
    showButton,
    enableButtonLink,
    buttonUrl,
    buttonLabel = "Click",
    showTimer,
    endDate,
    buttonPosition = "bottom"
  } = settings;

 let html = `<div style="background-color: ${bgColor}; color: ${textColor};">`;

// ‚úÖ 1. Render button first if buttonPosition is "top"
if (showButton && buttonLabel && buttonUrl && buttonPosition === "top") {
  html += `
    <div class="announcement-button btn-top" style="text-align: center;">
      ${
        enableButtonLink
          ? `<a href="${buttonUrl}" class="countdown-link-btn" style="color:${bgColor}; background:${textColor}; border: 1px solid ${textColor};">${buttonLabel}</a>`
          : `<button class="countdown-link-btn" style="color:${bgColor}; background:${textColor}; border: 1px solid ${textColor};">${buttonLabel}</button>`
      }
    </div>`;
}

// ‚úÖ 2. Render announcement types
if (type === "Marquee") {
  html += `
    <div class="marquee-wrapper">
      <div class="marquee-track" style="animation-duration: ${marqueeSpeed}s;">
        ${Array(50).fill(0).map((_, i) => `<div class="marquee-content">${messages[i % messages.length]}</div>`).join('')}
      </div>
    </div>`;
} else if (type === "Carousel") {
  html += `
    <div class="carousel-wrapper">
      <div class="carousel-track">
        ${messages.map(msg => `<div class="carousel-slide">${msg}</div>`).join('')}
      </div>
    </div>`;
} else {
  html += `<div class="announcement-title">${title}</div>`;

  if (showTimer && endDate) {
    html += `<div id="countdown-${sectionId}" class="countdown-container"></div>`;
  }
}

// ‚úÖ 3. If position is NOT "top", show button at the end
if (showButton && buttonLabel && buttonUrl && buttonPosition !== "top") {
  html += `
    <div class="announcement-button btn-${buttonPosition}" style="text-align: center;">
      ${
        enableButtonLink
          ? `<a href="${buttonUrl}" class="countdown-link-btn" style="color:${bgColor}; background:${textColor}; border: 1px solid ${textColor};">${buttonLabel}</a>`
          : `<button class="countdown-link-btn" style="color:${bgColor}; background:${textColor}; border: 1px solid ${textColor};">${buttonLabel}</button>`
      }
    </div>`;
}

html += `</div>`;
container.innerHTML = html;
console.log("üé® Banner rendered successfully.");


  // Carousel auto-slide
  if (type === "Carousel") {
    const track = container.querySelector(".carousel-track");
    let index = 0;
    setInterval(() => {
      index = (index + 1) % messages.length;
      track.style.transform = `translateX(-${index * 100}%)`;
    }, 3000);
  }

  // Countdown logic
  if (showTimer && endDate) {
    const countdownEl = document.getElementById(`countdown-${sectionId}`);
    const target = new Date(endDate);

    function updateCountdown() {
      const now = new Date();
      const diff = target - now;

      if (diff <= 0) {
        countdownEl.innerHTML = `<div class="countdown-expired">‚è∞ This offer has expired!</div>`;
        clearInterval(timerInterval);
        return;
      }

      const days = String(Math.floor(diff / (1000 * 60 * 60 * 24))).padStart(2, "0");
      const hours = String(Math.floor((diff / (1000 * 60 * 60)) % 24)).padStart(2, "0");
      const minutes = String(Math.floor((diff / (1000 * 60)) % 60)).padStart(2, "0");
      const seconds = String(Math.floor((diff / 1000) % 60)).padStart(2, "0");

      countdownEl.innerHTML = `
        <div class="countdown-unit"><span>${days}</span><span>Days</span></div>
        <div class="countdown-unit"><span>${hours}</span><span>Hours</span></div>
        <div class="countdown-unit"><span>${minutes}</span><span>Minutes</span></div>
        <div class="countdown-unit"><span>${seconds}</span><span>Seconds</span></div>`;
    }

    updateCountdown();
    const timerInterval = setInterval(updateCountdown, 1000);
  }

})();
</script>


{% endif %}

{% schema %}
{
  "name": "Announcement Banner",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "banner_id",
      "label": "Enter Announcement Banner ID",
      "default": "default-id"
    }
  ]
}
{% endschema %} 